import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JPanel;


public class GraphView extends JPanel{
	Country[] countries;
	//The countries cycle through this list of 6 colors. Can be modified directly 
	//from this array to change colors of countries dynamically.
	Color[] colors = {Color.RED, Color.BLUE, Color.GREEN, Color.BLACK, Color.GRAY, Color.PINK, Color.ORANGE, Color.MAGENTA};	
	PlottedPoints[] points;

	boolean showLabels = true;

	int width, height;
	//Buffers are just spacing values so that the items are in the right place
	int POINT_SIZE = 5, BUFFER = 50, TextBuffer = 10, GraphBuffer = 40,
			LabelBuffer = 80, LegendBuffer = 20, LegendSize = 150, ButtonHeight = 20, ButtonWidth = 90;
	Font font;

	double plottedXmin, plottedXmax, plottedYmin, plottedYmax;
	double dataXmin, dataXmax, dataYmin = 0, dataYmax;

	public GraphView(int w, int h, Country countries[]){
		setLayout(null);
		
		//Sets the GraphView Size and creates the border and title
		setSize(w-LegendSize, h);
		setBorder(BorderFactory.createTitledBorder("GraphView"));

		//Setting all the values
		width = w; height = h;
		this.countries = countries;
		points = new PlottedPoints[countries.length];
		plottedYmin = 0 + BUFFER;
		plottedYmax = height - GraphBuffer;
		plottedXmin = 0 + BUFFER;
		plottedXmax = w - LegendSize - LegendBuffer - LabelBuffer;

		//Defines the minimums and maximums
		if(countries.length > 0){
			dataXmin = countries[0].smallestNumber();
			dataXmax = countries[0].largestNumber();
			double max = -1;
			for(int i = 0; i < countries.length; i++){

				if(countries[i].mostSubscriptions() > max)
					max = countries[i].mostSubscriptions();
			}

			dataYmax = max;

			//Adds the Country points to PlottedPoints lists. Each year/subscription value is one Colored Point with
			//a color from the array of colors above based on which Country it is.
			for(int i = 0; i < points.length; i++){
				points[i] = new PlottedPoints();
				for(int j = 0; j < countries[i].getLength(); j++){
					double temp = countries[i].getSubscriptionsForYear((int) (dataXmin + j));
					double mapX = map(dataXmin + j, dataXmin, dataXmax, plottedXmin, plottedXmax);
					double mapY = map(temp, dataYmin, dataYmax, plottedYmin, plottedYmax);
					points[i].add(new ColoredPoint(colors[i%colors.length], mapX, height - mapY - POINT_SIZE/2, dataXmin + j, temp));

				}
			}
		}
		
		//Makes button to change if you want to show or hide the labels on the points.
		setFont(new Font("Times New Roman", Font.PLAIN, 8));
		JButton Labels = new JButton("Hide Labels");
		Labels.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e)
			{
				JButton b = (JButton)e.getSource();
				if(showLabels == true){
					b.setText("Show Labels");
					showLabels = false;
				}
				else{
					b.setText("Hide Labels");
					showLabels = true;
				}
				repaint();
			}
		});
		Labels.setBounds(width - LegendSize - ButtonWidth - 10, height - ButtonHeight - 25, ButtonWidth, ButtonHeight);
		add(Labels);
	}

	//A bunch of getters
	public int getLeftBuffer(){
		return width - LegendSize;
	}

	public int getLegendSize(){
		return LegendSize;
	}

	public int getHeight(){
		return height;
	}

	public PlottedPoints[] getPoints(){
		return points;
	}

	public Country[] getCountries(){
		return countries;
	}

	public void paintComponent(Graphics g2d) {
		//Clears the current JPanel and sets font.
		super.paintComponent(g2d);
		ColoredPoint current;
		g2d.setFont(new Font("Times New Roman", Font.PLAIN, 12));
		
		//Draws the points one by one from the PlottedPoints array
		for(int i = 0; i < points.length; i++){
			for(int j = 0; j < points[i].getList().size(); j++){
				current = points[i].getList().get(j);
				g2d.setColor(current.getColor());
				g2d.fillOval((int)current.getX(),(int)current.getY(),POINT_SIZE, POINT_SIZE);  

				//Draws the points' years and values (if the value isn't the same as the one before it)
				//so the front points that are all 0 subscriptions aren't written
				if(showLabels){
					if(j == 0){
						String label = current.getLabel();
						g2d.drawString(label, (int)current.getX(), (int)current.getY());
					}

					else if(current.getOriginalY() != points[i].getList().get(j-1).getOriginalY()){
						String label = current.getLabel();
						g2d.drawString(label, (int)current.getX(),(int)current.getY());
					}
				}

			}
		}

		g2d.setColor(Color.BLACK);

		//Draws the two graph lines
		g2d.drawLine((int)plottedXmin, (int)(height - plottedYmin), (int)plottedXmin, (int)(height - plottedYmax));
		g2d.drawLine((int)plottedXmin, (int)(height - plottedYmin), (int)plottedXmax, (int)(height - plottedYmin));

		//Writes down lowest year below the graph
		g2d.setFont(new Font("Times New Roman", Font.PLAIN, 10));
		g2d.drawString(String.valueOf((int)dataXmin), BUFFER, (int)(height - plottedYmin + TextBuffer + 5));

		//Writes the Year on the bottom
		g2d.setFont(new Font("Times New Roman", Font.PLAIN, 15));
		g2d.drawString("Year", BUFFER + getWidth()/3, height - (TextBuffer + 20));

		//Changes text direction and writes Number of Subscriptions on the side
		Graphics2D g = (Graphics2D) g2d;
		AffineTransform at = new AffineTransform();
		AffineTransform original = g.getTransform();
		at.setToRotation(-Math.PI / 2.0, getWidth()/2.0, getHeight()/2.0);
		g.setTransform(at);
		g.drawString("Number of Subscriptions (per 100 people)", height/3, 10);
		g.setTransform(original);

	}

	//Map function provided. Scales a value based on the min and max you allow it to be
	static public final double map(double value, 
			double dataMin, double dataMax, 
			double plottedMin, double plottedMax) 
	{
		return plottedMin + (plottedMax - plottedMin) * ((value - dataMin) / (dataMax - dataMin));
	}
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

}
